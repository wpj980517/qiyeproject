<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security.xsd">

    <!--配置哪些不需要经过spring-security-->
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/failer.jsp" security="none"/>
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>

    <!--
    	配置具体的规则
    	auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面
    	use-expressions="false"	是否使用SPEL表达式（没学习过）
    -->
    <security:http auto-config="true" use-expressions="false">
        <!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_USER的角色" -->
        <security:intercept-url pattern="/**" access="ROLE_USER,ROLE_ADMIN"/>

        <!-- 定义跳转的具体的页面 -->
        <security:form-login
        login-page="/login.jsp"
        login-processing-url="/login"
        default-target-url="/user/getUser"
        authentication-failure-url="/failer.jsp"
        authentication-failure-forward-url="/failer.jsp"
        authentication-success-forward-url="/user/getUser"

        />
        <!-- 关闭跨域请求 -->
        <security:csrf disabled="true"/>

        <!-- 退出 -->
        <security:logout invalidate-session="true" logout-url="/logout" logout-success-url="/login.jsp" />

    </security:http>

    <!-- 切换成数据库中的用户名和密码 -->
    <security:authentication-manager>
        <!--创建service类来继承并实现UserDetails类并重写其方法,这个查找是扫描所有文件寻找有实现此类文件然后扫描注解@Service-->
        <security:authentication-provider user-service-ref="userService">
            <!-- 配置密码加密的方式 -->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 配置加密类,将密码进行加密 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!--开启权限控制 jsr250-->
    <!--注意：这个标签只能存在一个，如果要开启别的直接写在后面即可-->
    <security:global-method-security jsr250-annotations="enabled" />
    <!--开启权限控制 secured-->
<!--    <security:global-method-security secured-annotations="enabled"/>-->
    <!--开启权限控制 PreAuthorize-->
<!--    <security:global-method-security pre-post-annotations="enabled"/>-->
</beans>